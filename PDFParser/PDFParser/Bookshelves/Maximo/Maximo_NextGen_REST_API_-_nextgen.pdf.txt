1 || 1 || maximo nextgen rest api overview  authentication  maximo native authentication  ldap based authentications  basic  form  api home oslc  rest api errors  querying maximo using the rest api  select clause  other forms of related data  images  database aggregation functions  bookmarks  cache properties  formula properties  federated resource data  aliasing of attributes  traversing to related mbosets  filtering data using where clause  range filters  synonymdomain internal filters  maxtabledomain based filters  timeline filters  classification attribute search  sorting  paging  auto-paging  limit paging  stable paging  filtering child objects  where filter  limit filter 
2 || 1 || sorting  timeline queries  json schema  creating and updating resources  deleting resources  actions  automation scripts  bulk operations  multiple resources creation with bulk  multiple operations with bulk  handling attachments  fetch the attachments  create the attachments  update the attachments  delete the attachments  handling attachments as part of the resource json  aggregation  aggregation column  aggregation filter  aggregation sort by  aggregation range  selecting distinct data  dealing with hierarchical data  location hierarchy  general ledger component hierarchies  interfacing with the workflow engine  handling task nodes  handling input nodes  handling interaction nodes  handling wait nodes  handling condition nodes  permissions in maximo  api routes 
3 || 1 || dynamic api documentation swagger  in memory processing of resources  saved queries  available queries for object structure  query method method java method  automation script script  object structure query clause osclause  applications query appclause  execute saved query for object structure  execute kpi clause for object structure  query template  set up query template  set up query template with attributes  differences between basic and advanced format  troubleshooting the rest api  password management using rest api  change password  forgot password  supporting birt reports in the rest api coming in next release  supporting file import csvxml and import preview using rest api coming in next release  prepare object structure  security  prepare csv  preview  file import  supporting file export  file export  creating a maximo user using the rest api  creating a maximo mt multi tenant tenant using the rest api  handling interactive logic in maximo using the rest apis  handling duplicate requests in rest api 
4 || 1 || overview maximo nextgen rest apis are a complete rewrite of the existing rest apis that was released around maximo version  maximo nextgen rest apis are in maximo releases starting  version the nextgen apis are often referred to as the restjson apis for the end to end support for json data format there are numerous benefits of using the nextgen apis with a few highlighted here  significantly enhanced support for querying maximo data - subselects related object queries multi-attribute text search custom queries javascripting
4 || 2 ||  support for system level actions - bookmarking notifications e-sig image association etc
4 || 3 ||  tight integration to automation scripts - query actions custom apis
4 || 4 ||  enhanced rest support for mif standard services - support json data type for those service methods
4 || 5 ||  metadata support using json schema
4 || 6 ||  supports dynamic query views
4 || 7 ||  support for group by queries
4 || 8 ||  supports custom json elements appended to the object structure json
4 || 9 ||  integration with maximo cache framework
4 || 10 ||  integration with maximo formulas
4 || 11 ||  integration with maximo federated mbosresources
4 || 12 || this api uses the same code base as the oslc rest apis which is used by the anywhere platform but is much simpler to setup no need to setup oslc resources and sheds the namespaced json that the oslc api required effectively this api is ready to be used when a vanilla maximo is installed and setup with users and groups - with no additional setup
4 || 13 || lets start with a high level overview of the architecture
5 || 1 || as you can see the rest api call flows through the authentication phase api routes authorization and then it interacts the with the maximo artifacts like mbos workflows automation scripts etc api routes are restlets rest handlers that provide the apis for interfacing with various maximo artifacts like - maximo business objects automation scripts images permissions schemas etc this is more for the developers of the api to organically expand the footprint of the rest apis to cover more and more parts of maximo we do not see any need for users of the of api to leverage this functionality yet we expect more routes to get added as we expand the apis over the next few releases
5 || 2 || note its recommended that you try out the apis as you walk through this document you can may want to install the json viewer plugin for ff or chrome which will make easier to view the json documents from the api response you may want to use a tool like chrome postman to make the post calls with the api
5 || 3 || this document also assumes that you would use the lean json format json with no namespace this can be achieved by setting the lean query parameter at login time note that it is recommended that you have the lean query parameter set for all requests as it is possible the request might move to another server as part of load balancing or if the original server fails over to a new server for brevity this query parameter will be ommited in most of the samples show below but it is recommended that you add that while making the requests
5 || 4 || this document also assumes some familiarity with maximo object structures which form the resources for this rest api a quick starter for the api demo can be viewed here r est api quick start
5 || 5 || authentication below we discuss the most common forms of authentication that we use in maximo deployments and how to use the rest apis for those authentication schemes
5 || 6 || maximo native authentication this is where maximo owns the user repository along with the user credentials maximo is responsible for authenticating the incoming rest call the rest api expects the http request with a maxauth request header that has a base encoded useridpassword a sample request would look like below post  oslclogin maxauth  base  encoded  userpass
6 || 1 || no  body  required ldap based authentications this is where maximo does not own the authentication credentials its owned by the application server and hence the authentication is validated by the application server
6 || 2 || basic in this scheme the application server expects the authentication credentials to be presented as below post  oslclogin authorization  basic  base  encoded  userpass no  body  required form in this scheme the request should look like below post  j_security_check content-type  applicationx-www-form-urlencoded j_usernameuseridj_passwordpassword note this being a form encoded post  the userid and password values needs to be url encoded values the response for this request will have the jsessionid cookie along with ltpa token cookies for websphere these cookies need to be re-used for the subsequent api calls
6 || 3 || in fact for all authentication schemes its recommended that we re-use the authenticated session for subsequent rest api calls by replaying the session and authentication based cookies from a successful authentication response this helps with performance as the subsequent api calls just re-use the session and does not need to re-authenticate for every request
6 || 4 || sample java client code for each of these authentication schemes can be referenced from the maximoconnectorjava code method setauth in the maximo connector code
7 || 1 || api home oslc the api root url is oslc a get call on that would fetch a json object with necessary links to get the details of the current maximo runtime explore the links like systeminfo whoami installedproducts servermembers apis along with details like the current date time language calendar of the deployed maximo some of the links are described below
7 || 2 ||  systeminfo this api provides the system information json for the deployed maximo instance the api is get oslcsysteminfo
7 || 3 ||  whoami this api provides the profile json for the logged in user the api is get oslcwhoami
7 || 4 ||  installedproducts this api provides the list of installed add-ons for maximothe api is get oslcproducts
7 || 5 ||  servermembers this api is the root api for the maximo management interface mmi
7 || 6 || the response json contains the list of live maximo servers as per the maximo serversession table note that it takes some time for the maximo runtime to detect a down server and hence it is possible that the response shows some servers that may not be operating at that instant the api is get oslcmembers the resulting json will have links to drill down into individual servers and introspect the various aspects of maximo runtime like memory mbo count integration caches threads database connections etc
7 || 7 || this is a pluggable list of data points which we have added over time and will continue to go on adding to help customers figure out maximo runtime server health
7 || 8 ||  license this api provides the list of available license keys for the various maximo components for this deployment the api is get oslclicense
7 || 9 ||  apimeta this api provides the metadata for all the object structures that are api eligible ie usewith value of reporting integration and oslc the api is get oslcapimetathe metadata for each object structure includes - the schema information as well as the available queries saved queries additionally it provides the creation api url and the security authorization application name we will cover these entities in details later in the document
7 || 10 || rest api errors querying maximo using the rest api lets start driving into the query aspect of this rest api a few important aspects were considered while designing this api framework
8 || 1 ||  being able to filter and sort maximo business objects using a higher level query language which internally will map to the native sql for the corresponding relation db used by maximo deployment
8 || 2 ||  being able to select the list of attributes that we want the api to fetch
8 || 3 ||  being able to fetch data from related objects leveraging existing maximo relationships - without needing any additional configuration
8 || 4 ||  being able to page data as needed
8 || 5 || with these basic requirements in mind we can now talk about some of the query parameters that are used for facilitating these query api is always based on a collection uri all collection uris for any resources that are api enabled support a known set of uri query parameters that help us operate on the collection the  most common ones are listed below there are many more and we will explore them as we go
8 || 6 || oslcselect this is used to specify the set of attributes to fetch from the object structures as well as the related objects
8 || 7 || oslcwhere this is used to specify the where clause which follows the syntax detailed in the next section where clause syntax
8 || 8 || oslcorderby this is used to specify the order by clause
8 || 9 || oslcpagesize this is used to specify the page size for the select clause a sample select clause might be help understand it better below is a simple select clause from the mxasset object structureselectassetnumlocationdescriptionstatus get  oslcosmxassetoslcpagesize the response collection resource looks like below     members      hrefuri                   responseinfo        nextpage  hrefnext  page  uri        hrefrequest  uri        pagenum     
9 || 1 ||  this will result in fetching the  members max of the mxasset resource which is based on the asset mbo in maximo - each member pointing to an asset record with a href that contains the link to get the details for that mxasset any collection resource in this rest api will follow this same basic structure
9 || 2 || note that the result is boxed under the member json array other than the member property there is another property called responseinfo which contains the meta information about the query the meta information includes the current uri used to get the result href as well the url for the next page nextpage if there is a next page it will also contain the url for the previous page previouspage if there is a previous page this will also contain the current page number pagenum and total database count totalcount of the rows that meet the query filter criterion as well as the total number of pages totalpages available for this query the totalcount and totalpages are not displayed by default and will be added only when we add the query parametervalue collectioncount to the request if you are just interested in getting the total count of records that match the query and not interested in the records itself you can just simply use the request query parameter count this will result in the following json
9 || 3 ||     totalcounttotal  count  of  records  matching  the  query  there is a system property called mxeoslccollectioncount which if set to  will always return the totalcount and totalpages by default as part of the responseinfo however we recommend not to set that property as there will be cases where you may not need those values and will unnecessarily incur the cost of getting those values which needs an additional sql call to get total count its preferred to just request them using the query parameter c ollectioncount as needed
9 || 4 || just getting the links to the member resources maynot be very exciting or useful rather than getting details by traversing individual uris we would leverage the o slcselect clause to get more details inlined in this response json
9 || 5 || get oslcosmxassetoslcpagesizeoslcselectassetnumlocationdescr iptionstatus the resulting json will look like     members
10 || 1 ||      hrefuri status status_descriptionsynonym  description  of  the  status             location             assetnum             assetmeter_collectionrefuri  for  assetmeters collection                   responseinfo        nextpage  hrefnext  page  uri        hrefrequest  uri        pagenum       this will result in a json that contains the  attributes as requested for each of the members
10 || 2 || note that by default the api response skips the null value attributes so for example if location is null for any of the member assets in the selection that attribute will not appear in the member json this helps reduce the response payload size to force the response to add null value attributes use the query parameter _dropnulls
10 || 3 || note that along with the status you will also have the status_description property which contains the synonymdomain description for that corresponding status value based on the users profile language the api framework will detect a domain bound attribute from the maximo metadata repository and will use the domain cache to fetch the description for that status
10 || 4 || you will also see the _rowstamp property which would be present for every object in the object structure for a given resource record this is used for handling dirty updates we will cover this in the createupdate of resources section
10 || 5 || you will also see the xxxx_collectionref properties which contain the links to child objects as defined in the mxasset object structure the prefix xxxx is the name of the child object as you traverse through those links ie get collectionref link you will see the collection of the child objects we can traverse through that collection resource just like any other collection ie we can page through them using oslcpagesize or filter them using oslcwhere or get partial views using oslcselect etc
11 || 1 || say if we wanted to get some data from the assetmeter objectwhere assetmeter is a child object as defined in the object structure mxasset to do this we can leverage the following select clause oslcselectassetnumstatusdescriptionlocationassetmeter the member json will look like      assetnum     assetmeter                
11 || 4 ||  as you can figure out to get the child object details we are using the notation - child object namecomma separated attribute names or  to get all properties so assetmeter is going to fetch all properties for the assetmeter this notation can easily be nested any levels deep for example you can do objproppropobjpropprop - where obj is defined as a child object of obj
11 || 5 || while this notation works for child objects you often will need to get more data from a related objects say locations or workorders which is not defined in the object structure the notation below will help us do this
11 || 6 || oslcselectassetnumstatusdescriptionlocationlocationdescriptionlocationstatus this will result in a member json like
11 || 7 ||      assetnum     location            status          status_description             alias_this_attrlocation       
12 || 1 || note the property  alias_this_attrlocation we will cover this in the aliasing attributes section
12 || 2 || asset to location is a  relationship and hence the dot notation format works out great and attaches the json object for the location with the member json for mxasset at the asset header object note that the api framework detected a conflict of names - attribute location and the relation named location note that the dot notation format is relation namerelation nameattribute name effectively these relations can be nested too the api response would bunch attributes at each relation level to form the json object a sample below might help oslcselectrelarelarelrelarelrelarelrela will result in a json like      rel        a
12 || 3 ||        a
12 || 4 ||        rel           a
12 || 5 ||           a
12 || 6 ||              rel           a
12 || 8 ||  as you might have noticed that dot notations produce json objects but if we need related data that would be  we would need a slight variation of this a real example would be assetworkorder an asset may have many open workorders and say we want to get details about all open workorders for my set of assets the select clause will look like below oslcselectassetnumrelopenwowonumdescription this rel notation has the format - relrelation name this will result in a json array property named relation name the sample output format would be like below
12 || 9 ||      openwo                wonum
13 || 1 ||        as like the dot notation this rel notation can be nested too the nesting got to happen as part of its attribute set as usual a sample will be much easier to talk to
13 || 2 || oslcselectrelrelattrattrrelrelattrattrrelrel relattr here the rel rel are samples of nesting the rel notation the relattr showcases the fact that you can embed a dot notation within a rel notation but not the other way roundthe rel also demonstrates that you can just use  to get all attributes for that target object although here it gets tricky as what would  imply - all persistent attributes or all persistent and non-persistent attributes combined so the rule of thumb we followed is as below  if the target object is a persistent object the  notation will include all persistent attributes for that object you would need to explicitly request the non-persistent attributes to get them included for example - relopenwodisplaywonum where displaywonum is a non-persistent attribute in the target object
13 || 3 ||  if the target object is a non-persistent object the  notation will include all non-persistent attributes for that object as it has not persistent attributes anyways
13 || 4 || note that these dot notation attributes and the rel attributes can be used at any level of the object structure for example we count use it in assetmeters like below oslcselectassetnumstatusassetmeterrelrelattrattrrela ttr a demo of this can be see here dynamic select clause
13 || 5 || other forms of related data so far we have been discussing how to fetch the mbo and related mbo attributes for the object structure we are now going to cover the other forms to related data and how to request them explicitly or implicitly
13 || 6 || images in maximo we have a image repository imglib table that stores the image avatars for the maximo managed resources likes assets items person etc the api framework maintains a cache of the image references while fetching the resource details if the system detects an image reference the uri for the image document will be added to the resulting json
14 || 1 || _imagelibref maximo image repository supports storing the images in maximo database or in an external repository - provided the repository exposes a simple uri based mechanism to load the images to facilitate that the imglib table has  attributes - i mguri and endpointname
14 || 2 || the endpointname points to the integration endpoint - which say is the https endpoint and the imguri refers to the url of the image which is used by the http endpoint to fetch the image its possible to use a custom endpoint that be leveraged to handle more complex urls bulk loading of images can be done using a sql command line tools associating images to any maximo mbos can be done using rest apis the sample rest api below associates an asset with an image
14 || 3 || post  oslcosmxassetidactionsystemaddimage custom-encoding  base x-method-overridepatch slug  maps  to  image  name  in  imglib content-type  maps  to  mime  type  in  imglib http  body  contains  the  base  encoded  image  bytes or post  oslcosmxassetidactionsystemaddimage x-method-overridepatch slug  maps  to  image  name  in  imglib content-type  maps  to  mime  type  in  imglib      imguriuri  for  the  externally  sourced  image     endpointname
14 || 4 ||  in the same line we have an api to delete the associated image post  oslcosmxassetidactionsystemdeleteimage x-method-overridepatch database aggregation functions maximo rest api supports using the database aggregation maxminavgsumcount and exists functions on related mbosets for example say we want to apply these functions on the open workorders for an asset the sample api below will use all the aggregation functions
15 || 1 || get  oslcosmxassetrest idoslcselectassetnumopenwoactlabhrs_dbavgopenwoactlabhrs_db sumopenwoactlabhrs_dbmaxopenwoactlabhrs_dbminopenwo_dbcount as you can see the format for the sumavgmax and min are relation nametarget attr name_operation note that the supported operations are the usual suspects dbsum for sum dbavg for avg dbmax for max and dbmin for min their format is always a dot  separated  token format which includes a relationship name token followed by an attribute name followed by the underscore prefixed _ operation to perform on that related attribute
15 || 2 || for the count operation dbcount we have a  token format which includes the relation name as the first token and the operation name _dbcount it will evaluate the count on that related mboset the json response would look like below      assetnum
15 || 3 ||     openwo          _dbcount         actlabhrs             _dbavg             _dbsum                 bookmarks maximo bookmarks can be leveraged with the rest apis
15 || 4 || cache properties formula properties we can select calculated values without needing to create non persistent attributes this can be done by leveraging the tight integration between the rest apis and the object formula feature introduced in maximo base  release an example of the formula properties would help explain it better
15 || 5 || say we create a object formula called myreplacecost for asset object using the object formula action from the database configuration application the formula can be defined as purchasepricenvlpriority we can then select that formula property associated with the asset object using the api select clause as shown below
16 || 1 || get oslcosmxassetoslcselectassetnumstatusexpmyreplacecostassetm eter the response would be as if myreplacecost was an attribute of the asset mbo
16 || 2 ||       member                  assetnum
16 || 3 ||            myreplacecost              
16 || 4 ||  similar approach will work for an individual resource get  oslcosmxassetrest idoslcselectassetnumstatusexpmyreplacecostassetmeter        assetnum
16 || 5 ||        myreplacecost  note that this can be considered as a great alternative to defining non-persistent attributes just for the sake of holding calculated values this acts like a dynamic attribute which does not need db config or admin mode
16 || 6 || for more information on maximo formula feature please visit m aximo formula
16 || 7 || federated resource data aliasing of attributes you might have noticed that the name clash of the attribute named location with the relation named location - both at the asset object level in xml world this could have been resolved with namespaces here in the json world we want to just rename the property with an alias
16 || 8 || aliasing thus refers to the process of renaming a mbo attribute in the json domain to avoid name
17 || 1 || conflicts if there is a name conflict the json response will mark rename attribute with the prefix  alias_this_attr to alias this attribute we can simple use the -- operator in the select clause as shown below oslcselectassetnumlocation--mylocationlocationstatus this will rename the location attribute to mylocation in the json domain note that -- operator only works on attributes and not on object names or relation names so effectively if an attribute name clashes with an object name or a relation name the attribute name needs to be aliased
17 || 2 || traversing  to related  mbosets traversing to related mbosets can be done by using the relation name as part of the get uri call sample below shows how we can move from asset to workorder using the relationship name
17 || 3 || get  oslcosmxassetrest  id openwooslcselect as you can see we are using the openwo relationship name to traverse to the workorder collection from a given asset now the resulting json will be a serialized response based on the workorder mbo whicb by default will not contain any non-persistent attributes for non-persistent attributes we need to request for them explicitly in the oslcselect clause
17 || 4 || get  oslcosmxassetrest  id openwooslcselectnpattrnpattr however in lot of cases you would prefer getting those response as a object structure collection resource we have a notation for doing just that
17 || 5 || get  oslcosmxassetrest  id openwomxwodetailoslcselect note the way we appended the object structure name at the end of the relation name with a dot separator with this request you will get all workorder records returned as mxwodetail records
17 || 6 || another variation of this api that we support is shown below get  oslcosmxassetrest idopenwooslcselectresponseosmxwodetail in both cases ie mbo vs object structure you can use all the collection api query parameters like oslcselect and oslcwhere and paging etc to filter sort and view the collection as you need
17 || 7 || note that this is recursive ie we can go as deep nested as we want using the relation name and the rest id pair an example is shown below
18 || 1 || get  oslcosmxassetrest  idopenworest idjobplanoslcselect note these rest ids are derived from the uris that come back from the server the client code should not need to generate these ids it should just leverage the uris and append the relation name token to it to traverse down from the selected record we have seen in previous sections how related mbosets can be inlined inside the parent mboset data using the r el notation this is different in the sense that we are not inlining the related mboset rather we are treating it just like another independent collection resource
18 || 2 || filtering data using where clause the most common way to filter a resource set is to use the oslcwhere query parameter this internally maps to the maximo qbe framework we can filter data based on all persistent attributes - at the main mbo for the os or any related mbo for example the where clause below would filter assets based on locations and asset status
18 || 3 || get  oslcosmxassetoslcwherestatusoperating  and locationstatusoperating note here the locations mbo is not part of the mxasset object structure the format for the dot notation locationstatus is relrelattr as you can make out the dot notation can be deeply nested the leaf element is always an attribute in the target mbo
18 || 4 || before we dive too much into nested queries lets just look at the different operators
18 || 5 || operator description usage  equals statusappr  greater than equals priority  greater than startdateiso date  less than startdateiso date  less than equals linecost  not equals priority in in clause location in abc priority in 
19 || 1 || this query language is data type sensitive and we would use the double quotes  for character based attributes and for dates iso format numeric values are represented in their corresponding iso formats ie non localized format boolean values are always represented either as  or truefalse no quotes oslcwherestatus  in  operatingactive  and  priority  and statusdateiso  date  string  and  linearfalse we can do in clause with numeric values too
19 || 2 || oslcwherepriority  in   to do like clause you can do the following variations
19 || 3 || oslcwherestatusappr if we want to do starts with oslcwherestatusappr if we want to do ends with oslcwherestatusappr for doing null value queries we can use the star  notation as below for example a not null check can be done using the following format where - status is not null
19 || 4 || oslcwherestatus if we wanted to do the is null check oslcwherestatus we have already shown a sample of the in clause if we want to do a not in clause - use the format below
19 || 5 || location  brbr note that this not in clause currently only works for aln attributes
20 || 1 || range  filters these are used for supporting range based queries for example if we want to only get assets in certain date range and priority range we can use this feature
20 || 2 || oslcwherepriority  and  priority  and installdate--t-  and installdate--t- the date ranges can be easier done with timeline queries which we will cover in a few sections
20 || 3 || synonymdomain internal  filters we can also filter using the internal values for synonymdomains the sample below shows how we can use that to filter the workorder objects based on the internal values for the status attribute bound to the wostatus synonymdomain
20 || 4 || get collection urioslcwheredomaininternalwherestatusapprinprg this will filter the workorder collection using the not in clause for the set of external values corresponding to the internal values of appr and inprg we can use a in comparison by changing the expression like below get collection urioslcwheredomaininternalwherestatusapprinprg few things to note here  the domaininternalwhere query parameter is independent of the oslcwhere and is anded to the oslcwhere clause if oslcwhere is present in the request
20 || 5 ||  the format is attr nameinternal_valinternal_val
20 || 6 ||  this feature always generates a sql with in or a not in operator depending on whether the  or  operator was used
20 || 7 ||  the list of internal values need to be comma delimited
20 || 8 ||  there can be one or many internal values and null is not allowed in this value set
20 || 9 || maxtabledomain  based  filters we can also filter using the maxtabledomain list where clause this is there more for backward compatibility reasons with the older rest api and in case a client wants to leverage an existing list where clause already created using the table-domain the api syntax is shown here
21 || 1 || get collection uri_fdmaxtabledomain name_fdsitesiteid_fdorgorgid this picks up the domains listwhere and applies that to the collection the site and org are optional and needed if the maxtabledomain is siteorg scoped
21 || 2 || timeline filters the timeline filters allow a simpler way to filter collections with time range based queries an example below shows how we can get all workorders reported in the past  months get  oslcosmxwodetailtlrange-mtlattributereportdate this will simply find all the workorders with a reportdate between today and and  months back
21 || 3 || the query is by default indexed around the current date another variation of this query would be to range on a future date just by switching the sign on the tlrange to say m instead of -m
21 || 4 || for reportdate a future date range may not be good use case but it would for date attributes like scheduled date etc which can be in future you might also use the current date as an index and filter around that date using the - notation like below tlrange-y this will filter records  years past and  years to the future indexed on the current date if current date is not what we want to index on we can specify the date that we want to use for the index as shown below tlattributereportdatesome  iso  date classification attribute search maximo objects like assets locations items workorders etc can be associated with classifications which provides a way to associate classification metadata aka classification attributes to the said objects maximo allows searching those objects assetslocations etc based on those attribute values this search capability is what we call as attribute search feature the rest apis support for this feature was added in  version of maximo base a sample below describes an attribute search applied to the asset mbo using the mxapiasset object structure
21 || 5 || get  oslcosmxapiassetattributesearchspeed this searches for all assets that have a class spec attribute called speed with a value  if we did not set that  and run the query as
22 || 1 || get  oslcosmxapiassetattributesearchspeed it would have only fetched assets that have speed as a spec attribute for combining multiple attributes together in the search follow the example below get  oslcosmxapiassetattributesearchspeedareaelev this will search for assets that have a class spec attribute speed with a value greater than  and an attribute named area and attribute name elev with a value of  all and-ed together
22 || 2 || note this feature is in addition to the oslcwheresavedquery query parameter so you can use this feature along with the other filtering capabilities that are supported in this api framework
22 || 3 || sorting sorting of collection resource can be done using the oslcorderby query parameter the format for this is get  collection  urioslcorderby-attrattr the attributes prefixed with the minus sign - will be sorted in the descending order and the ones with the plus  sign will be sorted in the ascending order all attributes listed here should be prefixed with a  or - sign there is not default sort order here also related attributes are not supported here only persistent attributes from the main object are supported here
22 || 4 || note that the  sign needs to get encoded - a common mistake made by developers when trying this one out
22 || 5 || paging paging of data is a basic requirement and we have a query parameter o slcpagesize to do just that that parameter value is used to specify the max records to fetch for a page a sample uri shown earlier describes how to achieve paging
22 || 6 || get  oslcosmxassetoslcpagesize as discussed before this causes the responseinfo object to have the nextpagepreviouspagepagenum totalcount optional and totalpages optional properties to describe page navigation information
23 || 1 || auto-paging we have had long faced this question about how to auto-initiate paging and in the current release candidate  we have finally added that feature this feature is primarily needed if we are accidentally requesting a large data set which can cause resource starvation or oom errors in maximo server to prevent that we have an attribute in the object structure application to set the auto-paging threshold for example if we set that to  for mxasset object structure and the request is as below get  oslcosmxasset although the oslcpagesize is not set the system will start paging the request if the asset count starts exceeding the  limit
23 || 2 || limit paging it is also possible that while querying a client set the page size to be too high which in turn could also cause an oom error to handle that scenario we have a property mxeoslcmaxpagesize which can be set to a positive value for the page size this will apply to all maximo object structures we can also set the property specific to an object structure by setting the property mxeoslcos name in lower casemaxpagesize this will override the global value set by property mxeoslcmaxpagesize if the request page size exceeds this value the system will throw an error and the request will fail
23 || 3 || stable paging stable paging is a variation of the basic paging in stable paging we load the mboset in memory note the mboset contains  mbos at this point as the mbos are loaded on demand and retain a reference to it throughout the paging process as we page through the mboset the mbos are discarded effectively at any given point in the paging only  mbo is live note the basic paging will also discard the mbos as we serialize them and there would never be more than  mbo in memory for the life of the paging however in basic paging the mboset gets loaded for every page request ie the sql query gets fired every time thats where stable paging scores big as it holds the mboset reference and does not need to fire the sql for every page the downside being the pages expire as they get delivered as the mbos get discarded and the mboset is never refreshed sample api to initiate stable paging get  collection  urioslcpagesizestablepagingtrue this creates a stable id which will be embedded as part of the n extpage uri stableidsome id we need to use that uri to page forward we cannot reload the same page as the page
24 || 1 || expires at first load there is no paging backward as pages including the current page have expired
24 || 2 || the stored mboset will expire if it has not been accessed for  minutes or it has be paged to the end of the set this idle expiry time of  minutes can be changed using the mxeoslcidleexiry value which is in seconds
24 || 3 || you can see a live demo of the stable paging here s table paging and search terms filtering child objects we have discussed how to leverage the rel notation to inline related mbosets as well as using the basic relation name with the curly brace notation to inline the object structure child objects along with the parent data this section will cover how to limit filter or sort those child data sets while being inlined within their parent data set all the query parameters for this child object collection operations follow a naming pattern which is mbo namerelation nameoperator the mbo name token refers to the parent mbo name for the child mboset we want to operate on the relation name is the relation name from the parent mbo to the child mboset the operator determines what kind of inline operation you are trying to do on the child collection
24 || 4 || below we list the query parameter types available to do this where  filter the format of this query parameter is mbo_namerelation_namewhere this will help us set the where clause filter for the child object identified by the m bo_name parent mbo and the relation_name relation name the syntax for the where clause exactly follows the oslcwhere format with the target mboset in context for example if we were to filter on the polines in the mxpo object structure we will use this feature as below get oslcosmxpooslcselectponumstatuspolinepolinenumitemnumlinec ostpopolinewhereitemnum  and  linecost this will show only the polines that have an intemnum and line cost greater than  note this does not in any way impact the selection of the po records
24 || 5 || to support the or clause on the where clause instead of the default a nd there is a query parameter mbo namerelation nameopmodeor which if set to  will treat the where clause specified above as a or clause this will result in fetching all lines that have either a itemnum or a line cost greater than 
25 || 1 || limit filter the format of this query parameter is mbo_namerelation_namelimit this will help us set the limit to the number of rows we want to retrieve for the child collection
25 || 2 || get oslcosmxpooslcselectponumstatuspolinepolinenumitemnumlinec ostpopolinelimit this will limit the number of polines loaded to only  for each po in the response
25 || 3 || sorting the format of this query parameter is mbo_namerelation_nameorderby this will help us sorting the child collection this follows the oslcorderby format and is applied to the context of the child collection
25 || 4 || get oslcosmxpooslcselectponumstatuspolinepolinenumitemnumlinec ostpopolineorderby-linecost this will do a descending sort on the linecost for the poline collection
25 || 5 || timeline queries the format for these query parameters are mbo_namerelation_nametlrange for the time line range eg -m or y and mbo_namerelation_nametlattribute the attribute name of the child object on which to base the time-line on following in the lines of the timeline queries as explained earlier
25 || 6 || note that these query child object filters help sift and limit what child objects we want to see inlined with the root object of the object structure but if we need to show those child objects in a list or tabular form and then page through them and filter them then we should consider using the relation name in the uri to traverse to that set as explained in the traversing to related mbosets section that way you will operate on the child collection independently and be able to page the collection
25 || 7 || json schema the rest apis describe the resource using json schema standards maximo metadata contains more information than json schema supports hence we extend that schema specification with maximo specific properties that contains more information from the maximo metadata
25 || 8 || schemas can be accessed in couple of ways using the rest api we have a jsonschemas route that provides schema to any object structure an example below shows that
26 || 1 || get oslcjsonschemasmxwodetail this will return the json schema for the root object of the object structure and will also contain links to the child objects like invreserve etc to get the schema for all the objects in the os we need to include the request parameter oslcselect this will fetch all the child objects inline into the root object schema while retaining the hierarchy structure
26 || 2 || note also that the properties in the schema map to the mbo attributes which are included as part of the os they also have the json schema type as well as the subtype that has the more specific maximo type
26 || 3 || additionally you can also specify the oslcselect clause to filter out the part of the object structure you need an example is shown below get  oslcjsonschemasmxwodetailoslcselectwonumstatusinvreserve will give you the details about the workorder wonum and status attributes and all attributes from the invreserve child object
26 || 4 || there is another popular way to get the schema while you are fetching details in a collection query the query below is a simple collection query get oslcosmxwodetailoslcselectwonumstatusdescriptioninvreserveitemnumassetassetnum assetstatus now say in addition to fetching the workorder records i wanted the schema for this oslcselect clause that is fetching part details from workorder wonum etc part from invreserve and part from asset which is not even part of the os using the dot notation to do that all we need to do is to add the query parameter addschema to the request url by doing that the response json objects responseinfo property will have the schema inlined inside it this is like getting the data as well as the metadata al in the same rest api call note that this schema will not be fetched for the next page request as the next page url will not have the addschema in the uri
26 || 5 || however if you add that query parameter explicitly it will fetch the schema for any page
26 || 6 || in  we will be adding support for mbo schemas too this is critical for use cases where we fetch a related mboset using the rest api without using the responseos query parameter for example say we wanted to evaluate the getlist api for an attribute - say status for a given workorder the api below will do the job get oslcosmxwodetailidgetliststatusoslcselect
27 || 1 || this will return the possible list of status values for that workorder state now the response is a serialized version of the synonymdomain mbo and is not an object structure if we wanted to have a schema for the response we can add the query parameter addschema and that will work for the response mboset without needing to set it as an object structure
27 || 2 || this mbo schema can also be accessed standalone using the route jsonmboschemas a sample call is shown below get oslcjsonmboschemasassetoslcselectassetnumstatuslocationdescriptionlocationstatusre lopenwowonumstatusaddschema this will return the json schema for asset mbo with the attributes assetnum and status along with the related attributes from location and workorder using the relopenwo
27 || 3 || on a similar note when we access some relation as a mboset we can apply json schemas there too without needing to use an object structure for this a sample below will show the use case get oslcosmxporest idvendoraddschemaoslcselect here we are accessing the related vendor for the po and we are not using any responseos query param to render the response to as an os and yet we can access the schema of the vendor which is the companies mbo
27 || 4 || note this mbo schema is a  feature and is not going to be available in prior releases the os schema is however available for releases before 
27 || 5 || creating and updating resources creating resources are almost always done using the collection uri - the same uri you would use to query the resources for example the api call for creating assets is shown below
27 || 6 || post  oslcosmxasset      assetnumasset     siteidbedford     descriptionmy  first  asset 
28 || 1 || once you create the asset you will get a response that contains a l ocation header with the uri of the newly created asset you can now use that location uri to fetch the newly created resource rather than doing a get to fetch the newly created resource you may want the response of the create to contain your newly created resource for that you can add the request header properties the properties header follows the syntax of the oslcselect clause you can use that to fetch all properties partial set of properties related mbo attributes formula properties etc everything that you can do with the select clause
28 || 2 || post  oslcosmxasset properties    
28 || 3 ||  or post  oslcosmxasset properties  assetnumstatus  
28 || 4 ||  using this properties header we can remove to the need to do an extra get for every createupdate
28 || 5 || now that we have created an asset we will try to update it for example say we want to set a location and a description to the asset
28 || 6 || post  oslcosmxassetrest  id  for  the  asset x-method-override  patch properties      locationbr     descriptiontest  asset  desc  note that the url we have a rest id at the end of the collection url this uri is pointing to a member asset in the collection - hence the rest id token after the collection uri note that this rest id is not the unique id for the mbo its a generated id for the mbo that is created using the primary-key attribute values also take note of the x-method-override request header and the
29 || 1 || value patch this instructs the server side to update the resource as with create you can specify the properties request header to get back the results of an update the sample here shows a value of  we would generally recommend avoiding use of  unless you really want all properties and instead use the selected set of properties that you care about works our better for performance
29 || 2 || note that we needed to fetch the uri of the mxasset reasource in order to update it fetching of that uri can be done in  ways  we can get the uri as part of a get collection query which will return all select members with their uris
29 || 3 ||  as part of  the response location header when we create a resource
29 || 4 || although this is the prevalent design for uri interaction in rest paradigm in some cases you may not have the uri and still need to update the asset based on other key information we will discuss how to do that shortly
29 || 5 || next lets try to add some child objects to this for this example we will add assetmeters to the newly creates asset the api below adds  assetmeters to an asset
29 || 6 || post  oslcosmxassetrest  id  for  the  asset x-method-override  patch patchtype  merge properties       descriptiontest  asset  desc     assetmeter                  meternametemp-f                 linearassetid                   meternameabc                 linearassetid         note that here we used an extra request header called p atchtype with a value of merge this instructs the server side to try to match the child objects - like assetmeter with the existing assetmters for this asset if it finds a match that assetmeter gets updates with the request assetmeter if there is no match it will create a new assetmeter we call this the merge api
29 || 7 || say the asset to be updated had  existing assetmeters and the request contained  existing
30 || 1 || assetmeter and  new assetmeter after the merge call that asset will be having  assetmeters - with one newly created one and another updated assetmeter
30 || 2 || to highlight the difference between a patch and merge call we can run the same request but without the patchtype header on another similar asset with  assetmeters the server side will create a new assetmeter and update the existing assetmeter just as in the merge call
30 || 3 || unlike the merge call it will end up deleting the assetmeters that were not in the request in this example the asset with be left with only  assetmeters that are in the request thus in patch request the server side will delete all child objects that are not in the request payload
30 || 4 || now lets talk about updating the child objects in this example we will update the assetmeter object to set the meter reading make sure the mxasset object structure has the np attributes newreading and newreadingdate included
30 || 5 || post  oslcosmxassetrest  id  for  the  asset x-method-override  patch patchtype  merge properties      descriptiontest  asset  desc  -  updating  temp  meter     assetmeter                  meternametemp-f                 linearassetid     newreading         notice that we included the primary keys of the assetmeter - metername and linearassetid for the meter update another option that the api allows is to use the href uri for the assetmeter instead of the primary keys the sample below shows that
30 || 6 || post  oslcosmxassetrest  id  for  the  asset x-method-override  patch patchtype  merge properties      descriptiontest  asset  desc  -  updating  temp  meter  with  child uri     assetmeter 
31 || 1 ||                 hrefparent  uriencoded_child_keys_anchored     newreading         if you are wondering how to selectively delete child object the request below shows just that
31 || 2 || post   oslcosmxassetrest  id  for  the  asset x-method-override  patch patchtype  merge properties      assetmeter                  meternametemp-f                 linearassetid     _actiondelete         note the use of child level actions _action to delete the assetmeter you could have also used the child href instead of the primary keys as shown before you could have also used the http delete method to delete the child object using the child object localuri uri
31 || 3 || delete  assetmeter  localuri note local uri for a child object in object structure is something you can use to refer directly to the child object you cannot do the same with the child href as that is an anchored uri for example you cannot use the child href for http delete
31 || 4 || note that using the post method with the _action child action you can do a bulk delete of child objects which you cannot do using the http delete method
31 || 5 || deleting resources in the last section we talked about deleting child objects in an object structure resource any updation of the resources properties including adding updating or d eleting child objects is done under the update api for the resource deleting the resource object structure root mbo can be done using the sample api below
32 || 1 || delete  oslcosos  namerest  id you will get a response of  ok if the delete is successful starting  we should also be able to do the same using the following api below post   oslcosos  namerest  id x-method-override  patch       _actiondelete  note in certain cases some browsers do not allow the http delete and this post equivalent is a good way to get around that
32 || 2 || it is also important to consider the fact that in maximo deleting a mbo should internally delete the dependent child objects the rest api merely invokes the delete routine on the mbo and is not responsible for what the mbo does internally to delete the dependent child objects
32 || 3 || additionally there is an action api that can be leveraged to figure out if this mbo can be deleted
32 || 4 || this is needed to handle use cases where we would want to delete the resource in  steps ie to mark it for delete and then delete it later to mark a resource for delete we will at least need to verify if the resource can be deleted fortunately there is a mbo call back api - candelete just for that purpose this rest api sample below shows how to invoke that get   oslcosos  namerest  idactionsystemcandelete a  ok response would indicate that the resource can be deleted note this depends on the application mbo implementing the candelete method which is not implemented by default in the mbo framework if delete is not allowed the response would an error json indicating the reason behind it as determined by the application mbo
32 || 5 || we will talk more about actions in rest api in the next section
32 || 6 || actions sometime back in maximo we had introduced the functionality of standard services the name may sound confusing the but the intent was fairly simple maximo has a bunch of application services - aka appservices which provide a bunch of service methods that act on mbos to perform some business task while most of these calls end up modifying the state of the system some of these calls are merely for getting information we have leveraged the jsr  annotations to expose these methods as webmethods which can be accessed using
33 || 1 || soap and rest calls for the purpose of this discussion we are only going to focus on the restful aspects of these methods
33 || 2 || simply put we can add a webmethod to any existing maximo app service by extending the service class and adding a method like below this example is from say extending the workorder service psdiappworkorderwoservice webmethod public void approvewsmbokeyvalueworkorder mboremote wo string memo      wochangestatusapprmxservergetmxservergetdatememo  next you want to make sure that your method is now available for rest api calls to do that you can select any workorder record and use the rest api to get the set of allowed actions on that resource for example the query below will do the job
33 || 3 || get oslcosmxwooslcwherewonumoslcselectallowedactions you will see the list of allowed actions which are nothing but the list of webmethods for the service corresponding to the root object of the object structure along with the list of actions registered with the object structure using the application menu action definition the resulting json would provide the json schema for web method as well as the http method and the name of the action which can be used to invoke the action a sample call below will demonstrate how these methods can be invoked
33 || 4 || post uri of the workorder actionwsmethodapprove x-method-override patch      memotesting  note we need to set the request header x-method-override as patch for invoking this action api as this is operating on an existing mbo the first parameter to the method as expected this mbo reference is derived from the request uri say - uri of the workorder  and passed into the method as part of the api invocation the json schema for the payload will reflect the parameter data types in the method and the parameter names
33 || 5 || as you can figure out the query parameter actionwsmethodapprove is the fully qualified name of the action the format is action typename where name is the java method name for the action type wsmethod
34 || 1 || you might already have guessed the limitation this has with overloaded methods currently overloaded methods are not supported for rest api calls
34 || 2 || there are quite a few of these methods that are available in the out of the box service i would recommend using the allowedactions to check out these methods we hope to be adding more and more of these methods every release as we evolve our application apis
34 || 3 || besides the webmethod based actions the rest apis support scripted actions too effectively you can write a rest action code using automation scripts a simple example below will explain this concept
34 || 4 || first we need to create an automation script from the autoscript application using the create screipt for integration option we need to select the object structure and then select the type of script as action processing and give a name for the action now you can write a script in any language - python js using the implicit variable m bo for example the script below changes the status of asset to operating mbochangestatusoperatingfalsefalsefalsefalse save the script
34 || 5 || note that you did not write any code to commit the modification to the asset mbo the rest api framework commits the transaction after the method completes
34 || 6 || next you need to register that script with the object structure goto the object structure application and select the action definition menu action and set the script as an action to the object structure as shown below name the action same as the name of the script choose ok to save the configuration
35 || 1 || n ext we can invoke this script with the request like below
35 || 2 || post uri of the asset actiontest x-method-override patch and you will see that the asset status changed to operating note that if you wanted to get the changed asset in response you can always add the request header p roperties with your desired value note you can also you can also use this actions rest apis to invoke workflows a sample below shows how workflow abc for asset can be invoked
35 || 3 || post uri of the asset actionworkflowabc x-method-override patch for non-interactive workflows this is all we need to do to initiate it interactive workflows are those that require user interaction by placement of assignments input and interaction nodes
35 || 4 || interactive workflows will be covered in the interfacing with the workflow engine section
36 || 1 || automation scripts the rest apis have a tight integration with the automation scripts automation scripts can be leveraged to develop custom apis a sample call shown below describes how automation scripts interact with rest apis
36 || 2 || say we want to find the total number of in progress work and service requests in a given site
36 || 3 || since there is no out of the box api for that you will end up writing one for yourself at this point in maximo lets say that we prefer to write any custom feature using automation scripting since this is rest apis with json response we would prefer to use the javascript language for scripting
36 || 4 || say we want to call this api countofwoandsr the api should look like this get  oslcscriptcountofwoandsrsiteabc we would like to get a response in json as below      wocount     srcount     total  now let us write the script to get this api going
36 || 5 || script name countofwoandsr importpackagepackagespsdiserver var  resp     var  site    requestgetqueryparamsite var  woset   mxservergetmxservergetmbosetworkorderrequestgetuserinfo wosetsetqbesiteidsite var  wocount    wosetcount respwocount    wocount var  srset   mxservergetmxservergetmbosetsrrequestgetuserinfo srsetsetqbesiteidsite var  srcount    srsetcount respsrcount    srcount resptotal    srcountwocount
37 || 1 || var  responsebody    jsonstringifyresp that is pretty much what we should need to get this api going all we need to do now is to save the script and open up our browser and fire off the get request and see if the results come up as expected
37 || 2 || we talked about the get support with automation scripts we can now talk about how to leverage post apis with scripting
37 || 3 || automation scripts are also used for implementing custom queries and custom actions we will discuss those in their respective sections
37 || 4 || bulk operations with maximo  restful json  api  you can process  multiple  resources with  multiple operations in  a  single  transaction
37 || 5 || the  bulk  process  only supported by  using collection  url you will use  post method  and x-method  override value bulk in the  header
37 || 6 || the  multiple  resources and  operations are provided in the  message  body with a  json array
37 || 7 ||  each resource has an  element  called  _data reserved  name in which the data for the  resource is  provided
37 || 8 ||  for update and  delete the  resource has an  element  called _meta reserved  name
37 || 9 || operation data  object  example create _dataassetnum test- siteid bedford  description ts test  update _datadescription new description _meta uriresource uri method patchpatchtypemerge delete _meta  uriresource  uri method delete 
38 || 1 || unless there is a syntax type of error in  your json  data  for bulk load you will always get  a  response code of 
38 || 2 ||  however  you need to process  the  response to determine which resources were updated successfully or not
38 || 3 || multiple resources creation with bulk after  reading  this  section you can  create multiple  resources  in  a  single  transaction
38 || 4 ||  as the  regular  creation  each of the  resources will go  through  the  validation process and the  response for each  of the  resources will be shown in response  json
38 || 5 || note the processing performs a  commit for each  resource
38 || 6 || post oslcosmxasset x-method-override  bulk  _data assetnum  test- siteid bedford  description ts test    _data assetnum  test- siteid bedford  description ts test    if the first asset  failed the  validation process by having the invalid site the http response code  will still be 
38 || 7 ||  however  the  error message  will be  shown  in  response like following post oslcosmxasset x-method-override  bulk  _data assetnum  test- siteid bedfordxxyy  description ts  test    _data assetnum  test- siteid bedford  description ts test  
39 || 1 ||  response  json  _responsedata  error  message  bmxaae  - bedfordxxyy is not  a  valid site enter a valid site value  as defined in the organization application statuscode  reasoncode bmxaae extendederror  moreinfo  hreferror  message  uri    _responsemeta  etag   status  location  oslcosmxasset_vevtvcznycrurgtje   the  first  assets are successful and  returns a  with  an error message
39 || 2 ||  the second asset  returns  a   with  the  uri  to the  asset  resource
39 || 3 || starting  we have simplified some of the request json structures for bulk request for example we can now support _action at the data level and we can avoid the _meta and _data altogether
39 || 4 || post oslcosmxapiasset properties x-method-override bulk             assetnum
40 || 1 ||        siteid        description        _actionadd                  href        description        _actionupdate                  href        _actiondelete       as you can see we avoid the _data and _meta with use of _action and href embedded inside the data
40 || 2 || for example we can support bulk change status as shown below post oslcosmxapiwodetailactionwsmethodchangestatus x-method-override bulk             statusappr        href                statusinprg        href      the response format has not changed
40 || 3 || multiple operations with bulk the  examples  in  first  section shows  the  creation of multiple assets  using the bulk processing you can also use  bulk to perform a  mix of create update and delete of asset  resources in  a  single  transaction
41 || 1 || to support  this in  addition to _data which is used to provide  the  json data  for  a resource in  a  bulk  transaction  you can also  provide meta  data using _meta another reserved name
41 || 2 ||  the metadata that can be provided are metadata description method it is the equivalent of the x-method-override header discussed earlier in this document when posting to create a new resource there is need to provide a method to perform an update you provide the value patch and for a delete you provide the value delete
41 || 3 || uri it is the resource uri when processing an update or delete this is required when updating or deleting a resource
41 || 4 || patchtype it allows the support of merge when processing an update as described earlier in this document
41 || 5 || below is an example json  data that will  update an  asset  with  a  new description  create  a  new asset test-  delete an  asset post oslcosmxasset x-method-override  bulk  _datadescription  new description _metauriresource urimethod  patch patchtypemerge  _dataassetnum test-siteid bedford description  new asset   _meta uriresource uri method delete   the  first  asset _meta data  includes  the  uri  to identify the along with headers identifying  that it is  a  patch  an update  with a type of merge
41 || 6 || the  second  asset  provides no  meta  data  since it is a create and no  _meta data is applicable
42 || 1 || the  third assets  provides only  the  _meta data to identify the  asset  to be  deleted
42 || 2 || as with the creation example earlier in this  section  the  response code will be  a   but you must examine  the  response information in the  response  json body to determine  if processing of each asset  was  successful or  not
42 || 3 || handling attachments attachments in maximo are documents files or images that are attached to a resource such as asset or service request the maximo restful api supports the retrieval of attachments that are associated to resources
42 || 4 || to fetch create update or delete an attachment for resource by api take mxasset as an example  you need 
42 || 5 || enable the maximo attachments feature
42 || 7 || configure the mxasset object structure with the doclinks mbo as a child to the asset object
42 || 8 || fetch the attachments when you query a specific resource using its id that has an attachment you will get a doclinks url returned for the attachment get  oslcosmxassetrest  id  
42 || 9 || assetnum   changedate  --t- doclinks   href oslcosmxassetrest iddoclinks  
42 || 10 ||  using the doclinks url from the json data above you will be get a list of attached documents reference to those documents along with the metadata
43 || 1 || get  oslcosmxassetrest  iddoclinks  href  oslcosmxassetrest  iddoclinks   member    href oslcosmxassetrest iddoclinksid describedby  docinfoid   addinfo  false weburl  attachmentspresentationppt doctype  attachments changeby  wilson createby  wilson copylinktowo  false show  false format  label  applicationvndms-powerpoint hrefhttppurlorgnetmediatypesapplicat ionvndmspowerpoint  getlatestversion  true ownerid   printthrulink  false urltype  file upload  false attachmentsize   modified  --t- title  attach created  --t- description  test  attachment   filename  presentationppt ownertable  asset hrefoslcosmxassetrest  iddoclinks metaid identifier      
44 || 1 || t he doclinksid url is the link to the actual attachment file the content of the attachment could be fetched by get  oslcosmxassetrest  iddoclinksid the doclinksmetaid url is the link to the metadata for the attachment file
44 || 2 || create the attachments the  api  supports  the  creation  of attachments that are associated  to resources for example you created an asset  and  now you  want  to attach  a  pdf file  that describes  the maintenance  procedures  for that asset
44 || 3 || to create a  new attachment you  will need an  doclinks  url for resource
44 || 4 ||  as shown in fetching  the attachment take  mxasset  as  an  example the url looks like as following doclinks href oslcosmxassetasset rest iddoclinks  note  in the  current version of the api you  can create an attachment for a resourceasset  only after the  resource exists in maximo
44 || 5 ||  you cannot  create the attachment at the time of creating  the  resource
44 || 6 || an  attachment  is  made  up of two  components attachment  file  you create an attachment using http  post  with  binary content or base  binary  content
44 || 7 ||  there is no support  for  multi-part  messages  yet
44 || 8 || related  metadata  of the  attachment  when creating an  attachment for  a  resource there is  a  limited  set of metadata  that can be  provided along  with the file using http headers header value description slug file name the name of the attachment file
45 || 1 || encslug file name if the attachment file name has non-ascii characters it can be provided in the header base encoded it is suggested that you always base encode your file name using this property if you believe you might have a mix of non-ascii characters content-type textplain based on the type of attachment - textplain supports a txt file x-document-meta attachments tied to the doctypes domain that defines the supported attachment types x-document-descri description the description of the document ption x-document-encde description if the description has non-ascii characters it scription can be provided in the header base encoded
45 || 2 || it is suggested that you always base encode your description using this property if you believe you might have a mix of non-ascii characters custom-encoding base this header facilitates testing using a browser client such as restclient for ff allows you to paste in a base encoded image into the body of the tool otherwise you need to test with programmatic tool you can use public tools to base encode your image file post  oslcosmxassetasset  rest  iddoclinks x-document-meta  fileattachments slug  testtxt x-document-descriptiontest  file hello  this  is  my  first  test  file the response location header contains the url for the uploaded attachment sample shown below
46 || 1 || location  oslcosmxassetasset  rest  iddoclinksid when we get on that url we will get the attached document that we uploaded before along with that it will also have a response header named link which will have a url to the metadata for this attachment
46 || 2 || link  oslcosmxassetasset  rest  iddoclinksmetaid this meta link can be used to get the metadata for the attachment a get on that link will fetch the json representation of the document description mimetype etc as shown in a sample below
46 || 3 || to create attachments of www url type we can use the following request as a sample
46 || 4 || post oslcosmxassetasset  rest  iddoclinks x-document-meta  urlattachments slug cnn content-location wwwcnncom x-document-descriptioncnn web site and in the response you will get a location header with the url of the newly created url attachment note that the url was set on the content-location request header the slug request header is used as the name of the attachment
46 || 5 || another important thing to note the x-document-meta request header has  parts - the url typedocument type the url type is a synonymdomain in maximo and hence hardcoding the values file or url maybe a problem in case those values have been modified at the customer installation you could potentially do one of the   avoid specifying the url type altogether the api framework would default the url type based on your request for example if the request has the content-location header it will be treated as a url type with internal value of www otherwise it will treated as a url type of file in each of these cases the system will use the default external value for these internal values file or www
46 || 6 ||  the other option would be to fetch the external values of the file and www types and then use that in the client side code to set the x-document-meta
46 || 7 || we tend to prefer the first approach as its simpler of the client
46 || 8 || update the attachments there is no support for updating  an  attachment you  would  need to delete the  current version and create a new version
47 || 1 || delete the attachments the attachments could be deleted by using http post with the url of the attachment and providing the x-method-override header with a value of delete
47 || 2 || post  oslcosmxasset_mtawmscrurgtjedoclinks x-method-override  delete handling attachments as part of the resource json starting  we support handling attachments as part of the object structure json here is a sample that adds  attached documents as part of asset creation
47 || 3 || post oslcosmxapiasset     assetnumtest    siteidbedford    doclinks           urltypefile       documentdataagvighvdybhcmugew       doctypeattachments       urlnamegreetingsabcdtxt               urltypefile       documentdataagvighvdybpcybagf       doctypeattachments       urlnamehowisthatfortxt          as you can see the documentdata attribute has the base encoded document
48 || 1 || aggregation aggregation api provides the aggregation function based on restful api after reading this section you will know how to use it getting the aggregated results back the results also provide collection links which only give the records in that group
48 || 2 || we mainly have the following query parameters for aggregation query parameters description example gbcols define the attributes and gbcolssiteid minbudgetcost aggregation function maxbudgetcostavgtotalcost gbfilters provide the ability to filter the gbfilterssiteidbedford aggregation result to a smaller set gbsortby provide the ability to sort the gbsortby-siteid aggregation result gbrelprop provide the ability to get the related property back gbrange provide the ability to get the gbrangeassethealth ranged aggregation result only support count aggregation column the aggregation api is running based on the attribute and aggregation function we define in gbcols for example we are trying to get the minimum maximum budget cost the average total cost and the count number of the assets for all of the site
48 || 3 || we must provide at least one attribute as the grouping on attribute in our case we use s iteid
48 || 4 || here is the table of syntax along with the example aggregation description example maxattributename the maximum value of the attribute maxbudgetcost minattributename the minimum value of the attribute minbudgetcost
49 || 1 || avgattributename the average value of the attribute avgtotalcost countattributename the count number of record count finally gbcolssiteidmaxbudgetcostminbudgetcostavgtotalcostcount in the result set the attribute like siteid will show the grouped value the aggregation attributes like maxattributename will show as max_attributename the result will also include the data as well as a resource collection link which will give you the resources in current group
49 || 2 || get oslcosmxapiassetgbcolssiteidcountminbudgetcostmaxbudgetcostavgtot alcost expected result    count   max_budgetcost   collectionref oslcosmxapiassetoslcwheresiteiddboston avg_totalcost   siteid  boston min_budgetcost      the gbcols also support multiple level aggregation we could build the following parameters to get the aggregation results for organization and site
49 || 3 || get oslcosmxapiassetgbcolsorgidsiteidcountminbudgetcostmaxbudgetcosta vgtotalcost expected result    count   orgid  eaglena max_budgetcost   collectionref  collection  ref avg_totalcost   siteid  bedford min_budgetcost     
50 || 1 || aggregation filter after you get the aggregation result set it is possible that you want to get the smaller set based on the requirements in this case we introduce the gbfilter which is the having clause in sql term the value for this query parameter must follow the sql clause format for example you want to get the grouped result only for bedford then we will have get oslcosmxapiassetgbcolssiteidcountgbfiltersiteidbedford e xpected result  count   sum_totalcost   collectionref oslcosmxapiassetoslcwheresiteiddbedford siteid  bedford  aggregation sort by in aggregation api we can define the gbsortby  value to get the sorted result back for example you want to sort the result set by site in descending order
50 || 2 || get   oslcosmxapiassetgbcolssiteidcountgbsortby-siteid for ascending order the item should be gbsortbysiteid however when we test in browser it is necessary to encode the value for gbsortby there is online site such as httpmeyerwebcomerictoolsdencoder helping you to do it copy the value siteid from url and encode it bring it and copy to url finally we will get gbsortby bsiteid for showing result by site in ascending order
50 || 3 || get oslcosmxapiassetgbcolssiteidcountgbsortbybsiteid aggregation range in aggregation api it is also possible to show the result set in different group in one range with gbrange in maximo  we only support count
51 || 1 || stringaln value for example you are trying to get the total count for work orders which is in wappr or appr status you need to append the following term to the url
51 || 2 || in result set the group for appr and wappr will be ranged to one new group with the total count and the collection link all the other result like statuscan will be shown as the regular grouped result
51 || 3 || get maximooslcosmxwodetailgbcolsstatuscountgbrangestatusapp rwappr expected result    count   status   appr wappr  collectionref oslcosmxwodetailoslcwherestatusinbapprcwappr d    numeric value we support numeric value as well for gbrange as well for example you want to get the count for workorder the first range is worpriority the second range is wopriority the rules to build the range is following the mathematics  and  means greater or less than including the side value  and  means greater or less than exclude the side value in our case we build gbrangewopriorty we will see the priority group has been excluded from the ranged result
51 || 4 || get  oslcosmxwodetailgbcolswoprioritycountgbrangewopriority expected result  count   collectionref oslcosmxwodetailoslcwherewopriorityd wopriority    
52 || 1 ||   count   collectionref oslcosmxwodetailoslcwherewopriorityedandwopriority c wopriority            count   collectionref oslcosmxwodetailoslcwherewopriorityedandwopriority cd  wopriority         selecting distinct data selecting distinct data can be done by replacing the oslcselect clause in a collection url with query parameter distinctattribute name a sample is shown below get osmxapiassetdistinctsiteidoslcwhere
52 || 2 || will respond with an json array of sites that match the said where clause
52 || 3 || bedfordnashua dealing with hierarchical data maximo has a lot of hierarchical objects - locations workorders assets failure codes etc
52 || 4 || there are subtle differences between each of these hierarchies and hence we would like to talk about each one of these separately
53 || 1 || location hierarchy the location hierarchy is maximo is always scoped under the locsystem object effectively a given location can belong to multiple systems and hence different hierarchies the api is designed such a way that we start off with the list of systems that is available for the user and then we dive into the hierarchy under the scope of that system
53 || 2 || we have an object structure - mxapilocsystem that can be leveraged to get a list of systems the api below shows how to do just that
53 || 3 || get osmxapilocsystemoslcselectsystemiddescription for there we would like to go to the top root location under that system you should select the system that you want to drill down using the href of the system record the api call below shows how to do that
53 || 4 || get osmxapilocsystemidtoplevelocmxapioperlocoslcselectsystemiddescription here toplevelloc is the name of the relation from locsystem to locations table notice that we have appended that object structure name to the relation name to get the response as the mxapioperloc os this helps us jump from one object structure to the other using the rest apis
53 || 5 || next we would like to drill down under that top level location for that we take the href of the location object that we got and append the relation name s yschildren with the os name mxapioperloc appended to it such that we stay in the context of the mxapioperloc os  the api for that is shown below get osmxapioperlocidsyschildrenmxapioperlocctxsystemidsystemid you will also note that we used a query parameter ctx with the value of systemidsystemid of the system that we are drilling down into this is needed as a location can belong to multiple systems and hence multiple hierarchies so while we drill down into the hierarchy we need to provide the systemid context
53 || 6 || now you can take any of the locations in the response and drill down by following the api described above always remember to set the ctx query parameter to the right systemid or else the api will default to the primary system for that location for the drill down
53 || 7 || you will also notice that these collection responses can be filtered sorted or paged just like any other os query response so if you are building a tree structure in the ui using these apis you can introduce a sorting or filtering function at each tree node which is a location
54 || 1 || general ledger component hierarchies gl component hierarchies provides another flavor of maximo hierarchies the general ledger account consists of segments gl components which follow a certain hierarchy as defined in the chartofaccounts and glcomponents table the glcomponents table defines all the components and their gl order in order for an end user to specify a general ledger account we would need to provide an api for looking up the segments in a hierarchical way following the gl order the set of apis below describes just that
54 || 2 || get oslcglcompleanoslcselect the response will be a list of gl segments at the top level ie gl order  for each of the records look for the childcompref uri if we do a get on that url we will get the child records for that segment note that the json also has a responseinfo that provides some metadata about the current segment glsegmentcurrent as well as the total number of segments glsegmentcount
54 || 3 || the glcompsofar describes the account that has been selected so far at the start it will just use the metacharacters  as configured and the segment separators to represent the account
54 || 4 || the get on the childcompref would look like the api call below
54 || 5 || get oslcglcompglcompcomposlcselect the collection of records you get would be the next set of segments that are valid for the segments selected so far as described in the glcomp query parameter value note the glcomp query parameter value gets updated to point to the next set of segments as we drill down
54 || 6 || internally it uses the  separator for the segments and hence the childcompref url for the rd set of segments will look like get oslcglcompglcompcompcomposlcselect you can instead also specify the glcompsofar value to drill down too the sample api call below shows how to do that
54 || 7 || get oslcglcompglvaluecomp-comp-oslcselect note the use of glvalue query parameter to get the values this will give the exact same results as the glcompcompcomp api call
54 || 8 || as is the case with the other hierarchies we can sort oslcorderby and filter oslcwhere with these apis
55 || 1 || interfacing with the workflow engine initiating a workflow for a given mbo can be done by using the api shown below post oslcosos namerest idactionworkflowworkflow name x-method-override patch this will invoke the named workflow in the context of the mbo identified in the uri
55 || 2 || handling task nodes after initiation the workflow might end up into a task node which generates an assignment the apis below shows how you can handle assignments
55 || 3 || the first step would be for the user to fetch hisher assignments for an user to fetch assignments use the api below get oslcosmxapiwfassignmentoslcselect this will fetch all the assignments for that user each assignment will have a positive action and a negative action to take the sample json is shown below               description
55 || 4 ||         wfassignmentid
55 || 5 ||         href         wfaction       instruction                  ispositivefalse                   instruction                  ispositivetrue                                       
56 || 1 ||       note that the wfaction json contains the positive and negative actions the user is supposed to take up one or the other
56 || 2 || the api call below shows how to take the positive action
56 || 3 || post href of the mxapiwfassignmentactionwsmethodcompleteassignment x-method-override patch     memosome memo    acceptedtrue  to take up the negative route you can just set the accepted flag to false in the json and post to the same href
56 || 4 || handling input nodes input nodes provide the user with interactive options to choose from in a workflow path the user may not choose anything in which case the workflow stays in that same state if the workflow framework looks ahead and sees an input node as the next node the rest api response for the current node say that was a task assignment that the user accepted or rejected will return 
56 || 5 || a response json which will have the details of the options that the input node provides
56 || 6 || the consuming client code is supposed to use those options to let the end user decide the option to chose
56 || 8 || a response location header with the url to post the users choice to
56 || 9 || the response json may look like this      member             actionid        instruction                  actionid        instruction
57 || 1 ||               nodetypeinput     internalnodetype wfinput  note that the input node type says that its wfinput this information can be leveraged by the consuming code say a mobile app to display a generic ui to represent these options
57 || 2 || the api call below describes how to choose an option post location uri       actionidchoose one of the action id from the json above      memo  note if this call is not made the workflow stays with the current node ie the node previous to the input node and does not move to the next node in essence the input node is a transient node which is only available for processing within that context of the previous node
57 || 3 || handling interaction nodes interaction nodes are maximo ui dialogs and applicationstabs that are presented to the user for himher to take an action using that ui artifact now unlike an input node this one is not a transient node this implies that the workflow engine has moved to the this node from the previous node
57 || 4 || when the workflow lands into this node the response json from the previous call should indicate that details of the interaction node presenting the information from the wfinteraction table for that node this should help identify using the json property internalnodetype with a value of wfinteraction  the client code to provide an equivalent interface for the maximo dialogapp for the user to act upon like the case with the input node the rest framework will generate a uri set the in the response location header for the client code to respond back to the interaction such that the workflow instance can move to the next node in the path
57 || 5 || now if the user ignores this node the engine just moves on to the next node but the engine needs to know that the interaction node job is complete one way or the other to do that the end user in maximo application will re-route the workflow by pressing the workflow route button to simulate that in the api realm the client code needs to make the api call shown below
58 || 1 || post location uri       interactioncomplete  this will indicate to the workflow engine that the interaction is complete
58 || 2 || handling wait nodes wait nodes are listeners to the mbo that is being workflowed event effectively the workflow waits on this event and when the event eventually happens it moves to the next node we do not need any special handling with apis for this node as this is backend event driven so if an event comes from any api calls mif call or ui call - for that mbo the workflow will listen for that and if the condition is met it will move to the next node in the path
58 || 3 || handling condition nodes condition nodes are automatically evaluated by the workflow engine and the engine will move to the next node in the path after condition evaluation
58 || 4 || permissions in maximo api routes dynamic api documentation swagger in memory processing of resources saved queries maximo supports a feature called a saved query where a pre-built query for an application such as work order tracking which allows a user to easily retrieve a common set of data
59 || 1 || example a list of approved work order after reading this section you can use the saved query capability to query records based on defined filter criterion with restful api call
59 || 2 || available queries for object structure for each object structure you can find all authorized for the requesting user saved queries using the apimeta api call listed below with mxasset object structure as an example talk about ispublic name title and href get  oslcapimetamxasset  
59 || 3 || querycapability    ispublic  true name  all href  oslcosmxasset   ispublic  true name  publicassets javamethod  true href  oslcosmxassetsavedquerypublicassets   title  it  stock  in  stock  locations  non-storeroom ispublic  true name  itstock hrefoslcosmxassetsavedqueryitstock   title  x ispublic  true name  linked-assets href  oslcosmxassetsavedquerylinkedassets   title  life  to  date  cost  is    of  replacement  cost ispublic  true name  assetbad  actor  -  ltd  cost
60 || 1 || href oslcosmxapiassetsavedqueryassetabadactor-ltdco st   
60 || 2 ||  in maximo we have  types of saved queries for object structure query  method method java  method this query is defined in object structures definition class i  t  is  sourced from an annotated method  name
60 || 3 || this  option  would  be used if a  method  was  implemented for query  purposes
60 || 4 ||  there  are no default query  methods  provided  this  would  be a custom code implementation
60 || 5 || the  code  example is as following preparedqueryhttpmaximonextgenassetpublicassets public  void  publicassetsmboset  assetset  throws  mxexception remoteexception  string  whereusercustassetnum  not  in  select  assetnum  from assetusercust assetsetsetuserwherewhereusercust  automation script  script this  query is run with a predefined automation script
60 || 6 ||  this configuration  allows  for  more complex queries than  are normally  supported  by  a  query  clause
60 || 7 || the  creation of a script for  an object structure  can  be defined as a query clause when you define  a  script as a query clause the  script can be  configured as  an  object structure query  for use with the  json  api
61 || 1 || o bject  structure query clause  osclause the  where clause for this  query  is  defined  in  this  query  definition
61 || 2 ||  for this  type you enter a where clause provide a name and description for  the  query and  flag whether the  query  is  public  or not the where clause format is  similar to a where clause that is used  in an  application list  tab public queries  are available to everyone to use
61 || 3 || non-public  queries are only available to the query owner
61 || 4 || applications  query appclause the  query is  sourced  from  a  public  saved  query of an application it could be associated  with  object  structure in  following ways using asset and mxasset as an example 
61 || 5 || open object structure app select query definition from action list set type  appcluase select the query from the list
62 || 2 || set the authorization name of mxasset as asset in apimeta the saved query names will be listed as original name
62 || 4 || set the authorization name of mxasset as mxasset then check load queries from all apps if you have the access to asset in apimeta the saved query name will show as assetqueryname  for the detail of oslc query see  ability to set query definitions and action associations in the object structures application
62 || 5 || execute saved query for object structure in maximo restful api the query parameter for all of the saved query is  savedquery note this parameter is case-sensitive if you apply savedquery or savedquery it will be ignored as invalid query parameter without any error
62 || 6 || in the querycapability section of apimeta the links for saved queries are already provided
62 || 7 || take itstock as an example get  oslcosmxassetsavedqueryitstock execute kpi clause for object structure
63 || 1 || in maximo restful api we could get more detail for kpi by calling its where clause with saved query as following get  oslcosmxassetsavedquerykpiassetkpi api will take the where clause from kpi and apply it to mxasset object structure
63 || 2 || note kpi clause will not be available in apimeta and you have to make sure the where clause in kpi could be applied to the main object of the object structure  otherwise you will get the sql error
63 || 3 || query template query template is an object structure-based template including the query related definition in collection level we can define the page size search attributes and timeline attribute in the template in attribute level we could add selected attribute give the ordered info and override the title of attribute
63 || 4 || after reading this section you will be able to create a query template for object structure we will mainly take mxasset as an example apply it to object structure and get selected attribute and ordered collection back
63 || 5 || currently the query template can be created by json api lets start with create one for mxasset here is the definition suppose we have an object structure named as mxapiquerytemplate for querytemplate set up query template page size   search attributes  assetnum description timeline attribute  changedate post  oslcosmxapiquerytemplate  pagesize searchattributesassetnumdescription timelineattributechangedate intobjectnamemxasset  assume the query template name for this new created query template is  since we havent defined any attribute yet the result set will only contain the reference links for each of the record when we apply the query template to object structure in this case mxasset we will use following query parameter to generate the restful call with query template
64 || 1 || querytemplate get  oslcosmxassetquerytemplatecollectioncount expected response info   responseinfo       nextpage         href  next  page  link       totalcount        pagenum        href  current  page  link      totalpages      from result set you will see there are only  records included in the first collection page since the searchattribute and timeline attribute already been defined in query template we could use oslcsearchterm and tlrange to filter the result set
64 || 2 || get oslcosmxassetquerytemplateoslcsearchtermpumptlrange- mcollectioncount please refer to search attribute and search term timeline section collectioncount to see more detail about oslcsearchterm tlrange and collectioncountwhat is the good way to do refer expected response info   responseinfo       nextpage         href  next  page  link      totalcount       pagenum       href  current  page  link     totalpages     
65 || 1 ||   set up query template with attributes after you define the basic configuration for query template you want to create several attributes for query template the syntax for attribute is shown in following table the examples are based on mxasset basic format format description example attribute the attribute name from the object assetnum relationshipattribute the attribute name from dynamic relationship allwowonum post  oslcosmxapiquerytemplate  pagesize  intobjectname mxasset querytemplateattr  selectattrname assetnum selectorder    selectattrname status selectorder   selectattrname siteid selectorder sortbyontrue sortbyorder ascendingtrue   assume the templatename is  after you apply the query template with the query the result set should return in  records per page each of the object will include the assetnum status and siteid besides the records will be sorted by site in ascending order
65 || 2 || get  oslcosmxassetquerytemplate expected result 
66 || 1 ||       assetusercust_collectionref  link  to  assetusercust       assetnum         _rowstamp         status_description  not  ready       assetopskd_collectionref  link  to  assetopskd       assetmeter_collectionref  link  to  assetmeter       status  not  ready       assetmntskd_collectionref  link  to  assetmntskd       siteid  bedford       assetspec_collectionref  link  to  assetspec       href  link  to  current  record  we also provide the capability to use the complex syntax with  notation after the attribute
66 || 2 || advanced fromat  format description example relrelationshipattribute the attribute name from dynamic relallwowonum relationship n relrelationshipexpform the formula for dynamic relationship relallwoexpformula ula n relrelationshiprelations the attribute name from multiple level relallwopmpmnum hipattribute relationship n childobjectnameattribute the attribute name from child object locationlocation  n expformula the formula for the object expformula suppose we are trying to build the following clause oslcselectrelallwowonumsiteidexpformulapmpmnumdescriptionlocationlocationdescri ptionallwowonumassetnumallwowonum the xyz syntax is relallwowonum relallwopmdescription assetnum relallwositeid locationlocation allwowonum relallwoexpformula locationdescrption
67 || 1 || relallwopmpmnum locationallwowonum differences between basic and advanced format the differences between relnameattrname objnameattrname and relrelnameattrname taking mxpo as an example suppose we are trying to deal with this relationship name  vendor parent  po child  companies and we are trying to get the name  for company we have following notations vendorname there is no specific action for it usually its used when we dont have companies as our child object in mxpo it will only take the first record back even it could be one to many
67 || 2 || companiesname it will convert to companiesname by query template usually its used when we have companies as our child object in mxpo and relationship could be vendor then we have to use objectname instead of relationship name to get the record back and it will return multiple records if the result is one to many
67 || 3 || relvendorname it will convert to relvendorname by query template usually its used when we dont have companies as our child object in mxpo but we still want to get multiple records back if the result is one to many troubleshooting the rest api the rest api leverages primarily the integration and oslc loggers for the api framework part
67 || 4 || enabling those  loggers to debug or info will provide a good amount of debugging information however the rest apis will always interface with maximo business objects and other maximo artifacts - security scripting etc which will have their own loggers on top of that we will often need to enable the sql loggers whenever we feel the query result is not what the filter clause described
67 || 5 || one good way to debug this thing may be to use the thread logging functionality which is integrated with the rest api framework
67 || 6 || thread logging is enabled on a per user basis within the rest api scope this can be done from the maximo logging application-configure custom logging-thread logging choose the context name as oslc and the user name as the personid of the user whose rest requests we want to trackdebug next we can enable the logging with say - sqloslc and integration loggers to start with
68 || 1 || this same step of enabling the thread logging can also be done by the user himself with the help of the rest api
68 || 2 || post  oslclogenablelogs logjloggermaximosqllogjloggermaximooslclogjloggerm aximointegration this will enable the thread logging for the current logged in user for the loggers sqloslc and integration there is another api oslclogenablealllogs that enables all logger for this user we recommend not setting that one right away as it would generate a tonne of log which may make it hard to debug we can disable this logging by making the call below post   oslclogdisablealllogs no  request  body  needed as we make the requests with this setup for the desired user the system keeps track of all the oslc integration and sql logs generated for that user only it will not mix the logs with other users or other contexts other than oslc that may also generate logs
68 || 3 || this log can then be accessed using a rest api call get oslclog this will stream the log to the browser this log is only for the user who was targeted with thread logging setup and can be accessed by only that user and only for that logged in user session once the session is done this log can still be accessed by the server admin from the servers working directory that would be a manual process - no rest api for that
68 || 4 || password management using rest api note this feature is only supported when maximo is configured to use maximo native authentication scheme if maximo is configured to use the application server security ie mxeuseappserversecurity property is set to  then the security provider for example the ldap user registries are responsible for password management and hence their admin tools should be leveraged to complete this task
68 || 5 || change password change password needs to get done when the password expires for an user or the user deems necessary to change the password for some other security concerns if the password has expired and the user attempted to login using the old password heshe will get an  error with
69 || 1 || the bmx id of bmxaae the client code can detect that error and then throw up the password change dialog for the end user to change the password the api to change password is shown below note the maxauth header will have the expired password
69 || 2 || post  changepassword maxauthbase  encoded  userpassword    passwordoldblah-old   passwordinputblah-new   passwordcheckblah-new   pwhintquestionpassword  hint  question  optional   pwhintanswerpassword  hint  answer  optional  -  goes  with  the hint  question  forgot password this api is used to reset password in maximothis would be initiated by the end user when the end user has forgotten the password
69 || 3 || post  forgotpassword     primaryemailthe  email  id  where  you  will  get  the  reset password    pwhintquestionthe  hint  question    pwhintanswerthe  hint  answer    loginidthe  login  id  of  the  user  this should send an email with the reset password note unlike the change password api here you do not have to provide the maxauth header as in this case the user does not remember his password
69 || 4 || supporting birt reports in the rest api in 
70 || 1 || supporting file import csvxml and import preview using rest api in  from  we support uploading data from flat file or xml file to maximo by restful api actionimportfile which leverages with application import capability in classic maximo
70 || 2 || prepare object structure for import using the xml format we do not need any special configuration to the object structure for flat file support similar with the application import in maximo we need to configure object structure to support flat structure this implies there shouldnt be any alias conflict for that specific object structure
70 || 3 || to verify that find your target object structure like mxapimeter in object structure application make sure support flat structure is checked and no alias conflict is detected by the system this should be indicated by alias conflict checkbox is unchecked
70 || 4 || if there are any conflicted fields find addmodify alias from action list add new alias to conflicted field starting from first child object
70 || 5 || the rest of this section will focus on flat files xml files would be exactly similar with a different header value
70 || 6 || security there is no special requirement on security - it just follows the normal object structure security concepts this implies that you got to have support for insertsavedelete sigoptions for your corresponding security application for the object structure to be able to import csv files
70 || 7 || prepare csv the csv format is exactly the same as what you would use in maximo classical application import this implies when we try to import file from csv the attribute name of each field must match with attribute alias in maximo
70 || 8 || for example the csv file content can be as following meternamemetertypereadingtypedescriptionmeasureunitid runhourscontinuousdeltarun hourshours temp-fgaugetemperature in fahrenheitdeg f preview before processing the data into the database it is always better to check if there is any error by using preview functionality it is supported in import file api here is the sample
71 || 1 || post  oslcosmxapimeteractionimportfilelean maxauthbase  encoded  userpassword preview meternamemetertypereadingtypedescriptionmeasureunitid runhourscontinuousdeltarun  hourshours temp-fgaugetemperature  in  fahrenheitdeg  f after we make the post request to server maximo will return the preview response which is including the validation information and warning messages
71 || 2 || here is the sample with error message      invaliddoc    how  many  invalid  records     totaldoc  how  many  records  in  csv  file  in  total     validdoc  how  many  valid  records     warningmsg  nbmxaae  -  processing  of  an  inbound transaction  failed
71 || 3 ||  the  processing  exception  is  identified  in document  ntbmxaae  -  the  action  add  is  not  allowed  on  object meter
71 || 4 ||  verify  the  business  rules  for  the  object  and  define  the appropriate  action  for  the  objectnbmxaae  -  processing  of  an inbound  transaction  failed
71 || 5 ||  the  processing  exception  is  identified  in document  ntbmxaae  -  the  action  add  is  not  allowed  on  object meter
71 || 6 ||  verify  the  business  rules  for  the  object  and  define  the appropriate  action  for  the  objectthe  error  messages  for  each record
71 || 7 ||  we can tell what is the problem from warning messages then fix it in the sample error responses we can tell the issue is caused by missing the security setup after granting the sigoptions and reprocess the call the successful preview will look like following  invaliddoc   totaldoc   validdoc   warningmsg   
72 || 1 || file import after preview we can import the file to maximo by removing preview header from request post  oslcosmxapimeteractionimportfilelean meternamemetertypereadingtypedescriptionmeasureunitid runhourscontinuousdeltarun  hourshours temp-fgaugetemperature  in  fahrenheitdeg  f and we can get response as following      validdoc    we also support other file type like xml customized delimiter and textqualifier you can easily configure them with the following headers when you do the post call
72 || 2 || header description default value filetype the type of the uploading file it can be flat or xml flat delimiter the delimiter of csv file  textqualifier when the data include any delimiter it will be  wrapped by textqualifier preview if the importfile api is running in preview mode it can  be  or  supporting file export file exporting can be done by using query parameter _formatcsv we can download data from any object structure for example mxapiasset in maximo to a flat file similar with file import before exporting data support flat file no alias conflict and security set up are required for the target object structure
73 || 1 || file export _formatcsv is always used with other query parameters together for different tasks
73 || 2 || here are some common ones
73 || 3 || oslcselect it can be used to control which columns are included in the csv file for example if we are trying to export data from asset with assetnum siteid description and location field we can add these four field to oslcselect as oslcselectassetnumsiteiddescription location
73 || 4 || oslcpagesize it is used to to control how many records we are going to download from server
73 || 5 || oslcorderby it can be used to define the orderby column in csv file
73 || 6 || oslcwhere it can be used to filtering the data
73 || 7 || most of querying or filtering capability are available for file exporting please refer to other chapter due to the requirement
73 || 8 || here is the sample rest call get oslcosmxapiassetleanoslcselectassetnumsiteiddescriptionlo cationoslcpagesizeoslcorderby-assetnum by this restful call we are going to download data from mxapiasset which including assetnum siteid description and location the maximum records number is  and the result will be sorted by assetnum
73 || 9 || creating a maximo user using the rest api creating a maximo user can be done using the mxperuser or mxperapiuser object structure this will create the maximo user and person at the same time the rest call is shown below post oslcosmxperuser     personidtestadmin    firstnameabc    lastnamexyz    primaryemailabc_xyzyahoocom    primaryphone      cityboston
74 || 1 ||    addresslinecrazy road    stateprovincema    postalcode    countryus    languageen    maxuser       loginidtestadmin   passwordcheckhelloabc   passwordinputhelloabc   defsitebedford   typetype    useridtestadmin          note that you have to set the passwordinput and passwordcheck to be not restricted in the object structure as they are set to restricted at the object level by default also this is an example of creating a user when maximo is the owner of authentication if authentication is handled by the application server we do not need to provide the passwordinput and passwordcheck attributes or any other password management details like emailpswd generatepswd password hint question force expiration etc as maximo does not manage passwords when mxeuseappserversecurity is set to 
74 || 2 || creating a maximo mt multi tenant tenant using the rest api we need to create an object structure say mxapitenantreg with the tenantdbuserid attribute restricted we also need to include the newusergroup and the docroot non-persistent attributes
74 || 3 || the sample below shows a post request to create a tenant post oslcosmxapitenantreg     tenantcodemytest    descriptionmy test  tenant    companytestcomp    firstnamemytest
75 || 1 ||    lastnamebhat    primaryemailabcusibmcom    tenantloginidmyabc    tenantdbuseridt    tenantlangcodeen    statusactive  this will create the tenant and the tenant admin with the loginid of myabc it will also send an email to the primary email address with the generated password we need to make sure that the smtp host is setup for this if the app server security is turned on then this smtp setup maynot be needed as the password management is done outside of maximo note a mt tenant cannot be created without the tenant admin  also note that this api needs to get invoked in the context of mt landlord
75 || 2 || handling interactive logic in maximo using the rest apis maximo business logic is filled with yesnocancellok interactions that needs specific user inputs to execute the corresponding business logic for this logic to be accessible from rest apis we need to make the rest api request interactive by default all rest requests are non interactive this will make the server side logic choose the default option and execute the default logic this may not be desirable in all cases to keep the choice at the users hand we have introduced the concept of interactive requests in this api the example below shows how to make that request post oslcosmxapiwodetailinteractive this will mark that request as interactive and hence now execute the interactive logic on the server side however you need to somehow set the desired user input for the interactive logic
75 || 3 || to do that we need to set the request header y ncuserinput
75 || 4 || the value can be a  separated list of name value pairs - each name will correspond to the yesno key - for example in the fldwoassetnum class one of the interactions is shown below say u were dealing with this one mxapplicationyesnocancelexceptiongetuserinputwoassetchange
75 || 5 || your request header would look like yncuserinput woassetchangevalue where the value is one of
76 || 1 || ok   cancel   yes   no   null  - an example shown below yncuserinput woassetchange now say you had ync nested - like one ync leads to the other - you can solve all of them by providing the values in sequence - like yncuserinput woassetchangesomeotherkeysomeothervalue handling duplicate requests in rest api often we will land up into a situation where the rest call committed successfully on the server but the communication channel broke and the client got a  error the client will think that the server rolled back the transaction and will end up re-sending the request this in some cases can result in erroneous or duplicate data to avoid this the rest api framework provides a mechanism to catch this double-dipping issue the request for createupdatedelete can contain a request header called transactionid which the api framework will validate for duplication if it finds no matches the transaction is good to go if however a match is found the request is rejected with a http  conflict error
76 || 2 || note that the transactionid header value is client generated and hence is the responsibility of the client code to make sure it is unique enough that is does not clash with another valid request if the server does not find a match it stores it as part of the request transaction commit so that in can reject future transactions with the same transaction id the default life of the transaction id is  minutes controlled by the escalation oslctxn however this can be modified as per the installation need
76 || 3 || note that this feature is primarily useful when we are operating the rest client in an asynchronous or disconnected mode much like the anywhere platform this feature may not make much sense for in the connectedinteractive mode
